name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME || 'localhost' }}
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME || 'localhost' }}/todo-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME || 'localhost' }}/todo-frontend

jobs:
  # Security Scan Job
  security-scan:
    runs-on: [self-hosted, linux, x64]
    if: github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 1: Build and Push Docker Images
  build-and-push:
    name: Build & Push Docker Images
    runs-on: self-hosted
    needs: [security-scan]
    steps:
      - uses: actions/checkout@v4

      - name: Check Docker availability
        run: |
          echo "Checking Docker availability..."
          docker --version || echo "Docker not available"
          docker-compose --version || echo "Docker Compose not available"
          docker info || echo "Docker daemon not running"

      - name: Log in to Docker Hub
        if: ${{ env.DOCKERHUB_USERNAME != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Release Version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            tagVersion=$(echo "${{ github.ref }}" | sed 's/refs\/tags\///')
            echo "RELEASE_VERSION=$tagVersion" >> $GITHUB_ENV
            echo "Using tag version: $tagVersion"
          else
            echo "RELEASE_VERSION=latest" >> $GITHUB_ENV
            echo "Using version: latest"
          fi
          echo "RELEASE_VERSION value: $RELEASE_VERSION"

      - name: Build & Push Backend
        run: |
          VERSION="${{ env.RELEASE_VERSION }}"
          if [ -z "$VERSION" ]; then VERSION="latest"; fi
          echo "Building backend image: ${{ env.BACKEND_IMAGE }}:$VERSION"
          docker build -t "${{ env.BACKEND_IMAGE }}:$VERSION" ./backend || echo "Backend build failed"
          docker push "${{ env.BACKEND_IMAGE }}:$VERSION" || echo "Backend push failed"

      - name: Build & Push Frontend
        run: |
          VERSION="${{ env.RELEASE_VERSION }}"
          if [ -z "$VERSION" ]; then VERSION="latest"; fi
          echo "Building frontend image: ${{ env.FRONTEND_IMAGE }}:$VERSION"
          docker build -t "${{ env.FRONTEND_IMAGE }}:$VERSION" ./frontend || echo "Frontend build failed"
          docker push "${{ env.FRONTEND_IMAGE }}:$VERSION" || echo "Frontend push failed"

  # Job 2: Deploy Application
  deploy:
    name: Deploy Application
    runs-on: self-hosted
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Create .env file from template
        run: |
          echo "Creating .env file from env.example..."
          cp env.example .env
          echo "Created .env file with default values"

      - name: Set Release Version for Deploy
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            tagVersion=$(echo "${{ github.ref }}" | sed 's/refs\/tags\///')
            echo "RELEASE_VERSION=$tagVersion" >> $GITHUB_ENV
            echo "Using tag version for deploy: $tagVersion"
          else
            echo "RELEASE_VERSION=latest" >> $GITHUB_ENV
            echo "Using latest version for deploy"
          fi

      - name: Update .env with new RELEASE_VERSION
        run: |
          echo "Setting RELEASE_VERSION=${{ env.RELEASE_VERSION }} in .env"
          
          # Update .env with RELEASE_VERSION using bash
          grep -v '^RELEASE_VERSION=' .env > .env.tmp
          echo "RELEASE_VERSION=${{ env.RELEASE_VERSION }}" >> .env.tmp
          mv .env.tmp .env
          echo "Final .env:"
          cat .env

      - name: Clean up existing containers
        run: |
          echo "Cleaning up existing containers..."
          docker compose down --remove-orphans || echo "No existing containers to remove"
          docker container prune -f || echo "Container cleanup failed"
          docker network prune -f || echo "Network cleanup failed"

      - name: Deploy locally with Docker Compose
        run: |
          echo "Deploying with Docker Compose..."
          docker compose pull || echo "Docker Compose pull failed"
          docker compose up -d --force-recreate || echo "Docker Compose up failed"
          echo "Deployment completed (with potential errors)"

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          docker compose ps || echo "Could not check container status"
          echo "=== DEPLOYMENT SUMMARY ==="
          echo "Frontend: http://localhost:3000"
          echo "Backend API: http://localhost:5000"
          echo "Nginx Proxy: http://localhost:80"
          echo "Health Check: http://localhost:5000/health"
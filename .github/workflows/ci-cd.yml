name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME || 'localhost' }}
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME || 'localhost' }}/todo-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME || 'localhost' }}/todo-frontend

jobs:
  docker-build-push:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Check Docker availability
        run: |
          echo "Checking Docker availability..."
          docker --version || echo "Docker not available"
          docker-compose --version || echo "Docker Compose not available"
          docker info || echo "Docker daemon not running"

      - name: Log in to Docker Hub
        if: ${{ env.DOCKERHUB_USERNAME != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Release Version
        run: |
          echo "RELEASE_VERSION=latest" >> $GITHUB_ENV
          echo "Using version: latest"
          echo "RELEASE_VERSION value: $RELEASE_VERSION"

      - name: Build & Push Backend
        run: |
          $VERSION = "${{ env.RELEASE_VERSION }}"
          if ([string]::IsNullOrEmpty($VERSION)) { $VERSION = "latest" }
          echo "Building backend image: ${{ env.BACKEND_IMAGE }}:$VERSION"
          docker build -t "${{ env.BACKEND_IMAGE }}:$VERSION" ./backend || echo "Backend build failed"
          docker push "${{ env.BACKEND_IMAGE }}:$VERSION" || echo "Backend push failed"

      - name: Build & Push Frontend
        run: |
          $VERSION = "${{ env.RELEASE_VERSION }}"
          if ([string]::IsNullOrEmpty($VERSION)) { $VERSION = "latest" }
          echo "Building frontend image: ${{ env.FRONTEND_IMAGE }}:$VERSION"
          docker build -t "${{ env.FRONTEND_IMAGE }}:$VERSION" ./frontend || echo "Frontend build failed"
          docker push "${{ env.FRONTEND_IMAGE }}:$VERSION" || echo "Frontend push failed"

      - name: Update .env with new RELEASE_VERSION
        run: |
          echo "Setting RELEASE_VERSION=${{ env.RELEASE_VERSION }} in .env"

          # Ensure .env exists and update it using PowerShell
          powershell -Command "
            if (-not (Test-Path .env)) { New-Item -Path .env -ItemType File }
            Get-Content .env | Where-Object { $_ -notmatch '^RELEASE_VERSION=' } | Out-File .env.tmp
            Add-Content .env.tmp 'RELEASE_VERSION=${{ env.RELEASE_VERSION }}'
            Move-Item .env.tmp .env
            Write-Host 'Final .env:'
            Get-Content .env
          "

      - name: Clean up existing containers
        run: |
          echo "Cleaning up existing containers..."
          docker compose down --remove-orphans || echo "No existing containers to remove"
          docker container prune -f || echo "Container cleanup failed"
          docker network prune -f || echo "Network cleanup failed"

      - name: Deploy locally with Docker Compose
        run: |
          echo "Deploying with Docker Compose..."
          docker compose pull || echo "Docker Compose pull failed"
          docker compose up -d --force-recreate || echo "Docker Compose up failed"
          echo "Deployment completed (with potential errors)"
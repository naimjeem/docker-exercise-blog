name: Emergency Rollback Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      rollback_version:
        description: 'Version to rollback to (leave empty for previous stable)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string
  repository_dispatch:
    types: [rollback-trigger]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Validate Rollback Request
  validate-rollback:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    outputs:
      rollback-approved: ${{ steps.validation.outputs.approved }}
      target-version: ${{ steps.version-check.outputs.target-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate rollback parameters
        id: validation
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || github.event.client_payload.environment }}"
          REASON="${{ github.event.inputs.reason || github.event.client_payload.reason }}"
          
          echo "🔍 Validating rollback request..."
          echo "Environment: $ENVIRONMENT"
          echo "Reason: $REASON"
          
          if [ -z "$ENVIRONMENT" ] || [ -z "$REASON" ]; then
            echo "❌ Missing required parameters"
            echo "approved=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [ "$ENVIRONMENT" != "staging" ] && [ "$ENVIRONMENT" != "production" ]; then
            echo "❌ Invalid environment: $ENVIRONMENT"
            echo "approved=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ Rollback request validated"
          echo "approved=true" >> $GITHUB_OUTPUT

      - name: Determine target version
        id: version-check
        run: |
          ROLLBACK_VERSION="${{ github.event.inputs.rollback_version || github.event.client_payload.rollback_version }}"
          
          if [ -n "$ROLLBACK_VERSION" ]; then
            echo "Using specified version: $ROLLBACK_VERSION"
            echo "target-version=$ROLLBACK_VERSION" >> $GITHUB_OUTPUT
          else
            # Get the previous stable version from GitHub releases
            PREVIOUS_VERSION=$(gh api repos/${{ github.repository }}/releases --jq '.[1].tag_name' || echo "latest")
            echo "Using previous stable version: $PREVIOUS_VERSION"
            echo "target-version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          fi

  # Job 2: Pre-Rollback Health Check
  pre-rollback-health-check:
    name: Pre-Rollback Health Check
    runs-on: ubuntu-latest
    needs: validate-rollback
    if: needs.validate-rollback.outputs.rollback-approved == 'true'
    outputs:
      current-health: ${{ steps.health-check.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check current environment health
        id: health-check
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || github.event.client_payload.environment }}"
          
          if [ "$ENVIRONMENT" == "production" ]; then
            URL="https://blog.example.com"
          else
            URL="https://staging-blog.example.com"
          fi
          
          echo "🔍 Checking current environment health: $URL"
          
          # Check health endpoint
          HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$URL/health" || echo "000")
          echo "Health endpoint response: $HEALTH_RESPONSE"
          
          # Check main API endpoint
          API_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$URL/api/posts" || echo "000")
          echo "API endpoint response: $API_RESPONSE"
          
          if [ "$HEALTH_RESPONSE" == "200" ] && [ "$API_RESPONSE" == "200" ]; then
            echo "✅ Current environment is healthy"
            echo "status=healthy" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Current environment has issues"
            echo "status=unhealthy" >> $GITHUB_OUTPUT
          fi

  # Job 3: Execute Rollback
  execute-rollback:
    name: Execute Rollback
    runs-on: ubuntu-latest
    needs: [validate-rollback, pre-rollback-health-check]
    if: needs.validate-rollback.outputs.rollback-approved == 'true'
    environment:
      name: ${{ github.event.inputs.environment || github.event.client_payload.environment }}
    outputs:
      rollback-success: ${{ steps.rollback.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Execute rollback
        id: rollback
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || github.event.client_payload.environment }}"
          TARGET_VERSION="${{ needs.validate-rollback.outputs.target-version }}"
          REASON="${{ github.event.inputs.reason || github.event.client_payload.reason }}"
          
          echo "🔄 Executing rollback..."
          echo "Environment: $ENVIRONMENT"
          echo "Target Version: $TARGET_VERSION"
          echo "Reason: $REASON"
          
          # Simulate rollback process
          echo "1. Stopping current services..."
          sleep 5
          
          echo "2. Pulling previous version image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TARGET_VERSION || echo "Using latest available version"
          
          echo "3. Deploying previous version..."
          sleep 10
          
          echo "4. Updating load balancer configuration..."
          sleep 5
          
          echo "5. Verifying rollback deployment..."
          sleep 10
          
          echo "✅ Rollback completed successfully"
          echo "success=true" >> $GITHUB_OUTPUT

      - name: Create rollback record
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || github.event.client_payload.environment }}"
          TARGET_VERSION="${{ needs.validate-rollback.outputs.target-version }}"
          REASON="${{ github.event.inputs.reason || github.event.client_payload.reason }}"
          
          # Create rollback record in a file (in real scenario, this would be stored in a database)
          cat > rollback-record.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "$ENVIRONMENT",
            "target_version": "$TARGET_VERSION",
            "reason": "$REASON",
            "initiated_by": "${{ github.actor }}",
            "workflow_run": "${{ github.run_id }}",
            "status": "completed"
          }
          EOF

  # Job 4: Post-Rollback Verification
  post-rollback-verification:
    name: Post-Rollback Verification
    runs-on: ubuntu-latest
    needs: execute-rollback
    if: needs.execute-rollback.outputs.rollback-success == 'true'
    outputs:
      verification-passed: ${{ steps.verification.outputs.passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for services to stabilize
        run: |
          echo "⏳ Waiting for services to stabilize after rollback..."
          sleep 30

      - name: Run post-rollback verification tests
        id: verification
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || github.event.client_payload.environment }}"
          
          if [ "$ENVIRONMENT" == "production" ]; then
            URL="https://blog.example.com"
          else
            URL="https://staging-blog.example.com"
          fi
          
          echo "🔍 Running post-rollback verification tests..."
          
          # Test 1: Health endpoint
          echo "Testing health endpoint..."
          HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$URL/health")
          if [ "$HEALTH_RESPONSE" != "200" ]; then
            echo "❌ Health endpoint failed: $HEALTH_RESPONSE"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "✅ Health endpoint OK"
          
          # Test 2: API endpoints
          echo "Testing API endpoints..."
          API_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$URL/api/posts")
          if [ "$API_RESPONSE" != "200" ]; then
            echo "❌ API endpoint failed: $API_RESPONSE"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "✅ API endpoint OK"
          
          # Test 3: Create functionality
          echo "Testing create functionality..."
          CREATE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST "$URL/api/posts" \
            -H "Content-Type: application/json" \
            -d '{"title":"Rollback Test","content":"Testing after rollback","author":"System"}')
          if [ "$CREATE_RESPONSE" != "201" ]; then
            echo "❌ Create functionality failed: $CREATE_RESPONSE"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "✅ Create functionality OK"
          
          echo "✅ All post-rollback verification tests passed"
          echo "passed=true" >> $GITHUB_OUTPUT

  # Job 5: Notify Stakeholders
  notify-stakeholders:
    name: Notify Stakeholders
    runs-on: ubuntu-latest
    needs: [execute-rollback, post-rollback-verification]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine notification status
        id: notification-status
        run: |
          if [ "${{ needs.execute-rollback.result }}" == "success" ] && [ "${{ needs.post-rollback-verification.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Rollback completed successfully" >> $GITHUB_OUTPUT
          elif [ "${{ needs.execute-rollback.result }}" == "failure" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Rollback failed" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "message=⚠️ Rollback completed but verification failed" >> $GITHUB_OUTPUT
          fi

      - name: Create rollback summary
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || github.event.client_payload.environment }}"
          TARGET_VERSION="${{ needs.validate-rollback.outputs.target-version }}"
          REASON="${{ github.event.inputs.reason || github.event.client_payload.reason }}"
          
          echo "## 🚨 Emergency Rollback Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.notification-status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Message:** ${{ steps.notification-status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Rollback Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Version:** $TARGET_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Reason:** $REASON" >> $GITHUB_STEP_SUMMARY
          echo "- **Initiated By:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Rollback Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Validation: ${{ needs.validate-rollback.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-Rollback Health: ${{ needs.pre-rollback-health-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Rollback Execution: ${{ needs.execute-rollback.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Post-Rollback Verification: ${{ needs.post-rollback-verification.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Investigate root cause of the issue that required rollback" >> $GITHUB_STEP_SUMMARY
          echo "- Update incident response documentation" >> $GITHUB_STEP_SUMMARY
          echo "- Schedule post-mortem meeting" >> $GITHUB_STEP_SUMMARY
          echo "- Review and improve rollback procedures" >> $GITHUB_STEP_SUMMARY

      - name: Send notifications
        run: |
          echo "📢 Sending notifications to stakeholders..."
          # Add notification logic here (Slack, email, PagerDuty, etc.)
          # Example:
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🚨 Emergency rollback executed in $ENVIRONMENT environment"}' \
          #   $SLACK_WEBHOOK_URL

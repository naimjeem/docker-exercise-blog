name: Quality Gates Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  COVERAGE_THRESHOLD: 85
  CODE_QUALITY_THRESHOLD: 8.0

jobs:
  # Job 1: Code Quality & Security (SAST)
  code-quality:
    name: Code Quality & Security Scan
    runs-on: ubuntu-latest
    outputs:
      quality-passed: ${{ steps.quality-check.outputs.passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run ESLint (Backend)
        run: |
          cd backend
          npx eslint . --ext .js --format json --output-file eslint-report.json || true
          npx eslint . --ext .js --format stylish

      - name: Run ESLint (Frontend)
        run: |
          cd frontend
          npx eslint src --ext .js,.jsx --format json --output-file eslint-report.json || true
          npx eslint src --ext .js,.jsx --format stylish

      - name: Security Audit (Backend)
        run: |
          cd backend
          npm audit --audit-level=high --json > audit-report.json || true
          npm audit --audit-level=high

      - name: Security Audit (Frontend)
        run: |
          cd frontend
          npm audit --audit-level=high --json > audit-report.json || true
          npm audit --audit-level=high

      - name: Check for HIGH severity vulnerabilities
        id: quality-check
        run: |
          # Check backend audit
          if [ -f backend/audit-report.json ]; then
            HIGH_VULNS=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length' backend/audit-report.json)
            if [ "$HIGH_VULNS" -gt 0 ]; then
              echo "❌ HIGH severity vulnerabilities found in backend: $HIGH_VULNS"
              echo "passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          
          # Check frontend audit
          if [ -f frontend/audit-report.json ]; then
            HIGH_VULNS=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length' frontend/audit-report.json)
            if [ "$HIGH_VULNS" -gt 0 ]; then
              echo "❌ HIGH severity vulnerabilities found in frontend: $HIGH_VULNS"
              echo "passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          
          echo "✅ No HIGH severity vulnerabilities found"
          echo "passed=true" >> $GITHUB_OUTPUT

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            backend/eslint-report.json
            frontend/eslint-report.json
            backend/audit-report.json
            frontend/audit-report.json

  # Job 2: Unit & Integration Testing
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.quality-passed == 'true'
    outputs:
      coverage-passed: ${{ steps.coverage-check.outputs.passed }}
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run backend unit tests with coverage
        run: |
          cd backend
          npm test -- --coverage --coverageReporters=json --coverageReporters=lcov --coverageReporters=text

      - name: Run frontend unit tests with coverage
        run: |
          cd frontend
          npm test -- --coverage --coverageReporters=json --coverageReporters=lcov --coverageReporters=text --watchAll=false

      - name: Run integration tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: testdb
          DB_USER: testuser
          DB_PASSWORD: testpass
          NODE_ENV: test
        run: |
          cd backend
          npm run test:integration || echo "Integration tests not configured yet"

      - name: Check coverage threshold
        id: coverage-check
        run: |
          # Check backend coverage
          if [ -f backend/coverage/coverage-summary.json ]; then
            BACKEND_COVERAGE=$(jq '.total.lines.pct' backend/coverage/coverage-summary.json)
            echo "Backend coverage: $BACKEND_COVERAGE%"
            if (( $(echo "$BACKEND_COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
              echo "❌ Backend coverage $BACKEND_COVERAGE% is below threshold ${{ env.COVERAGE_THRESHOLD }}%"
              echo "passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          
          # Check frontend coverage
          if [ -f frontend/coverage/coverage-summary.json ]; then
            FRONTEND_COVERAGE=$(jq '.total.lines.pct' frontend/coverage/coverage-summary.json)
            echo "Frontend coverage: $FRONTEND_COVERAGE%"
            if (( $(echo "$FRONTEND_COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
              echo "❌ Frontend coverage $FRONTEND_COVERAGE% is below threshold ${{ env.COVERAGE_THRESHOLD }}%"
              echo "passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          
          echo "✅ Coverage threshold met"
          echo "passed=true" >> $GITHUB_OUTPUT

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            backend/coverage/
            frontend/coverage/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: |
            backend/coverage/lcov.info
            frontend/coverage/lcov.info
          fail_ci_if_error: false

  # Job 3: Notify Results
  notify:
    name: Notify Quality Gate Results
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: always()
    steps:
      - name: Determine quality gate status
        id: status
        run: |
          if [ "${{ needs.code-quality.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ All quality gates passed" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Quality gates failed" >> $GITHUB_OUTPUT
          fi

      - name: Create quality gate summary
        run: |
          echo "## 🛡️ Quality Gates Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Message:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quality Gate Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality & Security: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests & Coverage: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY

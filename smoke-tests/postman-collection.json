{
  "info": {
    "name": "Blog Platform Smoke Tests",
    "description": "Smoke tests for the blog platform API endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has status OK', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.eql('OK');",
              "});",
              "",
              "pm.test('Response time is less than 100ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(100);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Get All Posts",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/posts",
          "host": ["{{base_url}}"],
          "path": ["api", "posts"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});",
              "",
              "pm.test('Response time is less than 200ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(200);",
              "});",
              "",
              "// Store first post ID for later tests",
              "const jsonData = pm.response.json();",
              "if (jsonData.length > 0) {",
              "    pm.environment.set('first_post_id', jsonData[0].id);",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "Get Single Post",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/posts/{{first_post_id}}",
          "host": ["{{base_url}}"],
          "path": ["api", "posts", "{{first_post_id}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has required fields', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('title');",
              "    pm.expect(jsonData).to.have.property('content');",
              "    pm.expect(jsonData).to.have.property('author');",
              "    pm.expect(jsonData).to.have.property('created_at');",
              "    pm.expect(jsonData).to.have.property('updated_at');",
              "});",
              "",
              "pm.test('Response time is less than 150ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(150);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Create New Post",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"title\": \"Smoke Test Post\",\n    \"content\": \"This is a test post created during smoke testing.\",\n    \"author\": \"Smoke Tester\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/posts",
          "host": ["{{base_url}}"],
          "path": ["api", "posts"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has created post data', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.title).to.eql('Smoke Test Post');",
              "    pm.expect(jsonData.content).to.eql('This is a test post created during smoke testing.');",
              "    pm.expect(jsonData.author).to.eql('Smoke Tester');",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('created_at');",
              "    pm.expect(jsonData).to.have.property('updated_at');",
              "});",
              "",
              "pm.test('Response time is less than 300ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(300);",
              "});",
              "",
              "// Store created post ID for cleanup",
              "const jsonData = pm.response.json();",
              "pm.environment.set('created_post_id', jsonData.id);"
            ]
          }
        }
      ]
    },
    {
      "name": "Test Invalid Post Creation",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"title\": \"Incomplete Post\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/posts",
          "host": ["{{base_url}}"],
          "path": ["api", "posts"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Response has error message', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "    pm.expect(jsonData.error).to.include('required');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Test Non-existent Post",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/posts/99999",
          "host": ["{{base_url}}"],
          "path": ["api", "posts", "99999"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test('Response has error message', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "    pm.expect(jsonData.error).to.eql('Post not found');",
              "});"
            ]
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.environment.get('base_url')) {",
          "    pm.environment.set('base_url', 'http://localhost:5000');",
          "}"
        ]
      }
    }
  ]
}
